name: Deploy to Render

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

env:
  PYTHON_VERSION: '3.11'

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Cache dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-asyncio httpx
    
    - name: Run linting
      run: |
        pip install ruff
        ruff check . || true  # Don't fail on linting errors
    
    - name: Test imports
      run: |
        python -c "from config.settings import Config; print('‚úÖ Config import successful')"
        python -c "from src.services.api_clients import APIClientManager; print('‚úÖ API clients import successful')"
        python -c "from src.models.database import DatabaseManager; print('‚úÖ Database import successful')"
    
    - name: Test database initialization
      run: |
        python -c "
        from src.models.database import DatabaseManager
        db = DatabaseManager()
        db.create_tables()
        print('‚úÖ Database tables created successfully')
        "
    
    - name: Basic API test
      run: |
        python -c "
        import os
        os.environ['SPOTIFY_CLIENT_ID'] = 'test'
        os.environ['SPOTIFY_CLIENT_SECRET'] = 'test'
        from config.settings import Config
        config = Config()
        validation = config.validate_required_config()
        print('‚úÖ Configuration validation:', validation)
        "

  deploy:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Deploy to Render
      env:
        RENDER_API_KEY: ${{ secrets.RENDER_API_KEY }}
        RENDER_SERVICE_ID: ${{ secrets.RENDER_SERVICE_ID }}
      run: |
        if [ -n "$RENDER_API_KEY" ] && [ -n "$RENDER_SERVICE_ID" ]; then
          curl -X POST \
            -H "Authorization: Bearer $RENDER_API_KEY" \
            -H "Content-Type: application/json" \
            "https://api.render.com/v1/services/$RENDER_SERVICE_ID/deploys" \
            -d '{"clearCache": false}'
          echo "‚úÖ Deployment triggered on Render"
        else
          echo "‚ö†Ô∏è Render deployment skipped (API key or Service ID not configured)"
        fi
    
    - name: Notify deployment
      run: |
        echo "üöÄ Deployment to Render initiated for commit: ${{ github.sha }}"
        echo "üì¶ Branch: ${{ github.ref_name }}"
        echo "üë§ Author: ${{ github.actor }}"
        echo "üìù Message: ${{ github.event.head_commit.message }}"